<div class="container">
<h1>La la la - title TK</h1>

<p>In 1977, the great computer scientist Donald Knuth published a facetious paper called <a href="https://en.wikipedia.org/wiki/The_Complexity_of_Songs">The Complexity of Songs</a>, in which he used the language of complexity theory to analyze the space complexity of popular songs - i.e. for some family of songs, how much space do you need to describe one of those songs, and how does that number change as the song's length goes to infinity?
</p>

<p>The running joke is that, over time, songwriters have worked to invent increasingly repetitive song structures ("the advent of modern drugs has led to demands for still less memory"). The paper ends with a proof, due to "Casey[sic] and the Sunshine Band", that some songs belong to the smallest possible complexity class, O(1).
</p>

<p>Nerdy computer science jokes aside, it's actually an interesting question whether the lyrics of popular songs have become more repetitive over time. Let's put it to the test.</p>

<h2>Measuring repetitiveness</h2>

<p>
I know a repetitive song when I hear one, but translating that intuition into a number isn't easy.
One thing we might try is looking at the number of unique words in a song, as a fraction of the total number of words. But this metric would call the following lyric excerpts equally repetitive:</p>

<div class="row">
    <div class="col-xs-5">
        <blockquote><p>Baby I don't need dollar bills to have fun tonight<br>
        I love cheap thrills<br>
        Baby I don't need dollar bills to have fun tonight<br>
        I love cheap thrills<br>
        I don't need no money<br>
        As long as I can feel the beat<br>
        I don't need no money<br>
        As long as I keep dancing</p>
        <p><cite>~ Sia, Cheap Thrills</cite></p>
        </blockquote>
    </div>
    
    <div class="col-xs-5">
        <blockquote><p>tonight I need dollar bills<br>
        I don't keep fun<br>
        cheap thrills long to feel money<br>
        the bills don't need the dancing baby<br>
        fun dollar dancing thrills the baby I need<br>
        don't have fun<br>
        no no don't have dancing fun tonight<br>
        beat the can as I don't feel thrills<br>
        love the dancing money</p>
        <p><cite>~ Colin Morris, Original composition</cite></p>
        </blockquote>
    </div>
</div>
<p>These are both 52 words long and use the same 23 word vocabulary, but the first one is clearly more repetitive, because it arranges words in a predictable, repetitive order.</p>

<p>What if we just zip each song and measure how much smaller it gets relative to the original size?</p>
<p>It sounds cheeky, but it turns out that the family of <a href="https://en.wikipedia.org/wiki/LZ77_and_LZ78">Lempel-Ziv algorithms</a>, used in many compressed formats, have a pretty natural correspondence between their performance and the "repetitiveness" of the input data.</p>
<p>Lempel-Ziv works by exploiting repeated sequences, which is exactly what we're interested in. It's also pretty easy to understand. The compressed version of the Sia excerpt above would look like...</p>

<code id="lzexample">Baby I don't need dollar bills to have fun tonight<br/>
I love cheap thrills<br/>
{72,72}{139,13}no money<br/>
As long as I can feel the beat{53,35}keep dancing</code>
<br><br>
<p>Where <code>{n,k}</code> tells the decompressor "go back n characters, and copy the substring of length k starting from there".</p>
<p>This chorus shrunk down a lot! Notice that the compressor took advantage of repeated lines, but also repeated phrases within lines ("I don't need ", "As long as I "). But the best part is, the next time we see this chorus, we can replace all 242 characters of it with a single "ditto".</p>


<p>
Applying this algorithm, turns out to shrink the average pop song to about <b>50%</b> of its original size. Rihanna's "Work" is a perfectly average example: it shrinks from 2,800 letters to 1,400 after compression. For comparison, an average newswire article compresses Y%.
</p>

<pre>TODO: some kind of animated illustration of the compression algorithm</pre>

<p>There's considerable variation around that average - let's look at some of the outliers. I'm using songs from the Billboard Hot 100 between 1958 and 2017. (I was able to find lyrics for 15,000 of the ~27,000 songs charting in that period.)</p>

<pre>TODO:
- probably not clear at a glance what the bars represent (even if there were column headings). Ideas for making this more intuitive:
    - instead of stacked bars, put them sequentially with an arrow between them: [original size bar] --> [shrunk size]
    - tooltips
    - use the bar-style illustration above when talking about example song
- excerpt a song's lyrics when hovering/focusing it?</pre>

<h2>The most repetitive songs of all time</h2>
<div id="topsongs"></div>

<p>The current decade is pretty well-represented in the top 10, but it's also a bit overrepresented in my dataset (it's easier to find lyrics for recent songs). To figure out whether music is getting more repetitive, we'll need to look at a lot more data...</p>

<pre>TODO:
- try a subtle scatterplot underlay effect
- figure out what units/scale to use ('rscore', big %, small %)
- top 10 line
</pre>

{{> story/overtime }}

<p>Who's responsible for this madness? Let's look at the average repetitiveness of some prolific artists (those that have at least 15 charting songs in the hot 100).</p>

<pre>TODO:
- color artists by genre?
- take a constant number of artists per decade. Make the "All" view not so insanely packed.</pre>

<br/>


<div id="artist-circles"></div>

<p>Genre seems like a significant factor. In the 00's, our artists actually separate pretty cleanly into two clusters, with country music and hip-hop (and whatever John Mayer does) on the left, and pop and rock on the right.
</p>

<p>The variation between artists is considerable. The Backstreet Boys have an average compression ratio of 40%, to Brad Paisley's 62%. In other words, if we asked the Backstreet Boys and Brad Paisley to each write a 400 word song, and compressed them both, we'd expect Brad's compressed song to be 50% bigger than BSB's.
</p>

<pre>TODO:
- consider looking at a particular artist's discography (e.g. the Tswift example from Ipython notebook)
    and talking through some observations, before unleashing the selection of all artists in the dataset.
- use different signposts (specific songs/artists rather than percentiles)
- Alternative to above: add a histogram (symmetric about the x-axis) as a backdrop.
    - I like how this looks. But it needs some smoothing. Could try to use a colormap as well, but that might
    be redundant and overwhelming.
    - animate translation of the histogram when changing the artist
    - maybe scale up max height according to number of songs (would help contextualize a discography like TSwift's)
- force text into bubbles (truncating if necessary)
- bug fix: when changing artist, circles seem to fly in from the top (whereas they should start in the middle
  at their 'true' positions, then repel apart)
- figure out how much text/exposition to accompany this with. And whether that text should just precede the widget,
  or if I should show a chart with artist fixed to X, then talk about what that says about X, and then have the
  version of the widget where artist is a free variable.
    - (maybe even go back to the Taylor Swift text, and use the version where x=year, y=repetition? that would
    probably be confusing. But could maybe instead stick with beeswarm but color the songs by album, with a 
    colormap that makes the direction of time clear.)
- profile. Seems a bit laggy at times.
- highlight a few examples of artists with interesting discographies (maybe as an alternative to blathering through
  a specific example)
- may want to limit number of songs per artist (Tswift's discog is v crowded right now)</pre>

<p>Let's zoom in on a specific artist, say Gwen Stefani. Each circle below represents a song in her discography. The pink blob is a histogram of the repetitiveness of all the songs in the dataset, for reference.
</p>

<p>Gwen's music is highly repetitive (her average score beats Britney, Beyonce, and Lady Gaga), but there's quite a spread. Four hugely repetitive songs contrast with the hugely non-repetitive ballad "Cool". The only repeated hook in the latter is the line "I know we're cool", repeated 9 times. "Hollaback Girl", on the other hand, has a 26-word refrain ("Few times I've been around that track... ain't no hollaback girl") that repeats 8 times, along with 33 repetitions of "this my shit", and a memorably repetitive speak-and-spell bridge. Gwen has range!</p>

<p>Hit the "randomize" button to see more artists, or scan the list at the bottom. (If your favourite song isn't there even though it charted, I'm sorry. Some songs' lyrics were missing or were discarded because they were too messy. Also, I didn't include songs with featured or co-credited artists.)</p>
<div id="discog-widget"></div>


</div>
