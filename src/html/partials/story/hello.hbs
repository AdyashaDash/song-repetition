<div class="container">
<h1>La la la - title TK</h1>

<p>In 1977, the great computer scientist Donald Knuth published a facetious paper called <a href="https://en.wikipedia.org/wiki/The_Complexity_of_Songs">The Complexity of Songs</a>, in which he used the language of complexity theory to analyze the space complexity of popular songs - i.e. for some family of songs, how much space do you need to describe one of those songs, and how does that number change as the song's length goes to infinity?
</p>

<p>The running joke is that, over time, songwriters have worked to invent increasingly repetitive song structures ("the advent of modern drugs has led to demands for still less memory"). The paper ends with a proof, due to "Casey[sic] and the Sunshine Band", that some songs belong to the smallest possible complexity class, O(1).
</p>

<p>Nerdy computer science jokes aside, it's actually an interesting question whether the lyrics of popular songs have become more repetitive over time. Let's put it to the test.</p>

<h2>Measuring repetitiveness</h2>

<p>
I know a repetitive song when I hear one, but translating that intuition into a number isn't easy.
One thing we might try is looking at the number of unique words in a song, as a fraction of the total number of words. But this metric would call the following lyric excerpts equally repetitive:</p>

<div class="row">
    <div class="col-xs-5">
        <blockquote><p>Baby I don't need dollar bills to have fun tonight<br>
        I love cheap thrills<br>
        Baby I don't need dollar bills to have fun tonight<br>
        I love cheap thrills<br>
        I don't need no money<br>
        As long as I can feel the beat<br>
        I don't need no money<br>
        As long as I keep dancing</p>
        <p><cite>~ Sia, Cheap Thrills</cite></p>
        </blockquote>
    </div>
    
    <div class="col-xs-5">
        <blockquote><p>tonight I need dollar bills<br>
        I don't keep fun<br>
        cheap thrills long to feel money<br>
        the bills don't need the dancing baby<br>
        fun dollar dancing thrills the baby I need<br>
        don't have fun<br>
        no no don't have dancing fun tonight<br>
        beat the can as I don't feel thrills<br>
        love the dancing money</p>
        <p><cite>~ Colin Morris, Original composition</cite></p>
        </blockquote>
    </div>
</div>
<p>These are both 52 words long and use the same 23 word vocabulary, but the first one is clearly more repetitive, because it arranges words in a predictable, repetitive order.</p>

<p>What if we just zip each song and measure how much smaller it gets relative to the original size?</p>
<p>It sounds cheeky, but it turns out that the family of <a href="https://en.wikipedia.org/wiki/LZ77_and_LZ78">Lempel-Ziv algorithms</a>, used in many compressed formats, have a pretty natural correspondence between their performance and the "repetitiveness" of the input data.</p>
<p>Lempel-Ziv works by exploiting repeated sequences, which is exactly what we're interested in. It's also pretty easy to understand. The compressed version of the Sia excerpt above would look like...</p>

<code id="lzexample">Baby I don't need dollar bills to have fun tonight<br/>
I love cheap thrills<br/>
{72,72}{139,13}no money<br/>
As long as I can feel the beat{53,35}keep dancing</code>
<br><br>
<p>Where <code>{n,k}</code> tells the decompressor "go back n characters, and copy the substring of length k starting from there".</p>
<p>This chorus shrunk down a lot! Notice that the compressor took advantage of repeated lines, but also repeated phrases within lines ("I don't need ", "As long as I "). But the best part is, the next time we see this chorus, we can replace all 242 characters of it with a single "ditto".</p>


<p>
Applying this algorithm, turns out to shrink the average pop song to about <b>50%</b> of its original size. Rihanna's "Work" is a perfectly average example: it shrinks from 2,800 letters to 1,400 after compression. For comparison, an average newswire article compresses Y%.
</p>

<pre>TODO: some kind of animated illustration of the compression algorithm</pre>

<p>There's considerable variation around that average - let's look at some of the outliers.</p>

<pre>TODO:
- probably not clear at a glance what the bars represent (even if there were column headings). Ideas for making this more intuitive:
    - instead of stacked bars, put them sequentially with an arrow between them: [original size bar] --> [shrunk size]
    - tooltips
    - use the bar-style illustration above when talking about example song
- excerpt a song's lyrics when hovering/focusing it?</pre>

<h2>The most repetitive songs of all time</h2>
<div id="topsongs"></div>

<p>The current decade is pretty well-represented in the top 10, but it's also a bit overrepresented in my dataset (it's easier to find lyrics for recent songs). To figure out whether music is getting more repetitive, we'll need to look at a lot more data...</p>

<pre>TODO:
- try a subtle scatterplot underlay effect
- explain the shift from measuring by compression % to the units on this y-axis. (Or maybe just try 
    using % throughout and see how it looks, even though it's technically not a great scale. Could 
    maybe compromise by labelling with % but using logarithmic scale.)
- when talking about a particular year, make that year's point very prominent</pre>

{{> story/overtime }}

<p>Who's responsible for this madness?</p>

<pre>TODO:
- some text to yoke these visualizations together and tell a coherent story
- consider looking at a particular artist's discography (e.g. the Tswift example from Ipython notebook)
    and talking through some observations, before unleashing the selection of all artists in the dataset.
- remove non-beehive mode from discography widget
- may want to limit number of songs per artist (Tswift's discog is v crowded right now)</pre>

<br/>

<div id="artist-circles"></div>


<h2>Artist discographies</h2>
<p>The widget below shows the repetitiveness of all a particular artist's charting songs. The vertical lines represent the 10th, 50th, and 90th percentiles - i.e. 80% of all songs in the dataset fall between those goalposts. Untick "beehive" to see another version that uses the x-axis for time and the y-axis for repetitiveness. (No axes implemented right now for that one).
</p>
<div id="discog-widget"></div>


</div>
